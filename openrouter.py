import streamlit as st
import requests
import os
from datetime import datetime
import json
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Claude Coder Assistant",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
st.markdown("""
<style>
    .stTextArea > div > div > textarea {
        font-family: 'Courier New', monospace;
    }
    .code-block {
        background-color: #f0f0f0;
        padding: 10px;
        border-radius: 5px;
        border-left: 3px solid #4CAF50;
        margin: 10px 0;
    }
    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
    }
    .user-message {
        background-color: #e3f2fd;
        border-left: 3px solid #2196f3;
    }
    .assistant-message {
        background-color: #f3e5f5;
        border-left: 3px solid #9c27b0;
    }
</style>
""", unsafe_allow_html=True)


class ClaudeAPI:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://openrouter.ai/api/v1"
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "HTTP-Referer": "http://localhost:8501",
            "X-Title": "Claude Coder Assistant",
            "Content-Type": "application/json"
        }

    def get_models(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            response = requests.get(f"{self.base_url}/models", headers=self.headers)
            if response.status_code == 200:
                models = response.json()['data']
                claude_models = [model for model in models if 'claude' in model['id'].lower()]
                return claude_models
            return []
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
            return []

    def send_message(self, messages, model="anthropic/claude-3.5-sonnet", temperature=0.1, max_tokens=4000):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ Claude"""
        payload = {
            "model": model,
            "messages": messages,
            "temperature": temperature,
            "max_tokens": max_tokens
        }

        try:
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=self.headers,
                json=payload,
                timeout=60
            )

            if response.status_code == 200:
                return response.json()
            else:
                st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return None

        except requests.exceptions.Timeout:
            st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
            return None
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None


def extract_code_blocks(text):
    """–ò–∑–≤–ª–µ—á—å –±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ —Å —è–∑—ã–∫–æ–º
    pattern = r'```(\w+)?\n(.*?)```'
    matches = re.findall(pattern, text, re.DOTALL)
    return matches


def format_message(content, is_user=True):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    message_class = "user-message" if is_user else "assistant-message"
    role = "üë§ –í—ã" if is_user else "ü§ñ Claude"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
    code_blocks = extract_code_blocks(content)

    st.markdown(f"""
    <div class="chat-message {message_class}">
        <strong>{role}:</strong>
    </div>
    """, unsafe_allow_html=True)

    if code_blocks:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–æ, –º–µ–∂–¥—É –∏ –ø–æ—Å–ª–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        parts = re.split(r'```\w*\n.*?```', content, flags=re.DOTALL)
        code_pattern = r'```(\w+)?\n(.*?)```'
        codes = re.finditer(code_pattern, content, re.DOTALL)

        part_idx = 0
        for match in re.finditer(code_pattern, content, re.DOTALL):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞
            if part_idx < len(parts) and parts[part_idx].strip():
                st.markdown(parts[part_idx])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ –∫–æ–¥–∞
            language = match.group(1) if match.group(1) else 'text'
            code = match.group(2)

            col1, col2 = st.columns([10, 1])
            with col1:
                st.code(code, language=language)
            with col2:
                if st.button("üìã", key=f"copy_{hash(code)}", help="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"):
                    st.code(code, language='text')
                    st.success("–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")

            part_idx += 1

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        if part_idx < len(parts) and parts[part_idx].strip():
            st.markdown(parts[part_idx])
    else:
        st.markdown(content)


def main():
    st.title("ü§ñ Claude Coder Assistant")
    st.markdown("*–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ –±–∞–∑–µ Claude Sonnet*")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # API –∫–ª—é—á
        api_key = os.getenv('OPENROUTER_API_KEY')
        if not api_key:
            api_key = st.text_input("OpenRouter API Key:", type="password",
                                    help="–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://openrouter.ai/")

        if api_key:
            claude_api = ClaudeAPI(api_key)

            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            models = claude_api.get_models()
            if models:
                model_options = [model['id'] for model in models if 'sonnet' in model['id'].lower()]
                if not model_options:
                    model_options = [model['id'] for model in models]

                selected_model = st.selectbox(
                    "–ú–æ–¥–µ–ª—å:",
                    model_options,
                    index=0 if model_options else None
                )
            else:
                selected_model = "anthropic/claude-3.5-sonnet"
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            temperature = st.slider("Temperature:", 0.0, 1.0, 0.1, 0.1)
            max_tokens = st.slider("Max tokens:", 1000, 8000, 4000, 500)

            # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞
            st.header("üìù –®–∞–±–ª–æ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
            templates = {
                "–û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–¥": "–û–±—ä—è—Å–Ω–∏, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥:\n\n```\n{code}\n```",
                "–ù–∞–π—Ç–∏ –æ—à–∏–±–∫–∏": "–ù–∞–π–¥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º –∫–æ–¥–µ:\n\n```\n{code}\n```",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å": "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥:\n\n```\n{code}\n```",
                "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏": "–î–æ–±–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —ç—Ç–æ–º—É –∫–æ–¥—É:\n\n```\n{code}\n```",
                "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —è–∑—ã–∫": "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ —Å {from_lang} –Ω–∞ {to_lang}:\n\n```\n{code}\n```"
            }

            selected_template = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", list(templates.keys()))

            if st.button("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω"):
                st.session_state.use_template = templates[selected_template]

            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
                st.session_state.messages = []
                st.rerun()

        else:
            st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á OpenRouter!")
            st.stop()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    chat_container = st.container()
    with chat_container:
        for message in st.session_state.messages:
            format_message(message["content"], message["role"] == "user")

    # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    with st.form("chat_form", clear_on_submit=True):
        col1, col2 = st.columns([10, 1])

        with col1:
            user_input = st.text_area(
                "–í–∞—à –≤–æ–ø—Ä–æ—Å:",
                value=st.session_state.get('use_template', ''),
                height=100,
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ Python"
            )

        with col2:
            st.markdown("<br>", unsafe_allow_html=True)
            submit_button = st.form_submit_button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", use_container_width=True)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        col3, col4 = st.columns(2)
        with col3:
            include_context = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", value=True)
        with col4:
            code_focus = st.checkbox("–§–æ–∫—É—Å –Ω–∞ –∫–æ–¥–µ", value=True)

    # –û—á–∏—Å—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if 'use_template' in st.session_state:
        del st.session_state.use_template

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if submit_button and user_input.strip():
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∫–æ–¥–µ
        system_message = {
            "role": "system",
            "content": """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü–∏—Å–∞—Ç—å —á–∏—Å—Ç—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥
2. –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
3. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
4. –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –≤ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã
5. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
6. –ë—ã—Ç—å —Ç–æ—á–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è—Ö

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–æ –∫–æ–¥ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–¥—É –ø–∏—à–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º."""
        }

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        api_messages = []
        if code_focus:
            api_messages.append(system_message)

        if include_context:
            # –í–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context_messages = st.session_state.messages[-10:]
            for msg in context_messages:
                api_messages.append({
                    "role": msg["role"],
                    "content": msg["content"]
                })

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        api_messages.append({
            "role": "user",
            "content": user_input
        })

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.messages.append({
            "role": "user",
            "content": user_input,
            "timestamp": datetime.now()
        })

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        format_message(user_input, True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        with st.spinner("ü§î Claude –¥—É–º–∞–µ—Ç..."):
            response = claude_api.send_message(
                api_messages,
                model=selected_model,
                temperature=temperature,
                max_tokens=max_tokens
            )

        if response and 'choices' in response:
            assistant_message = response['choices'][0]['message']['content']

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            st.session_state.messages.append({
                "role": "assistant",
                "content": assistant_message,
                "timestamp": datetime.now()
            })

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            format_message(assistant_message, False)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            if 'usage' in response:
                usage = response['usage']
                st.sidebar.info(f"""
                üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:**
                - –í—Ö–æ–¥: {usage.get('prompt_tokens', 0)}
                - –í—ã—Ö–æ–¥: {usage.get('completion_tokens', 0)}
                - –í—Å–µ–≥–æ: {usage.get('total_tokens', 0)}
                """)

            st.rerun()


if __name__ == "__main__":
    main()
